@using SiteMVC.Models;
@using SiteMVC.Repositories;
@model IEnumerable<Users>
@inject UserRepository userRepository
@inject AccountRepository accountRepository
@inject RolesRepository rolesRepository
@inject ClassRepository classRepository
@{
    ViewData["Title"] = "Пользователи";
    string login = User.Identity.Name;
    var account = await accountRepository.GetAccountByLoginAsync(login);
    var user = await userRepository.GetUserByAccountAsync(account);
    var userRole = await rolesRepository.GetUserRoleAsync(user);
    IEnumerable<Users> students;
    students = await userRepository.GetStudents();
}

<h1>Пользователи</h1>

@if (userRole.Name == "admin")
{
    <p>
        <a asp-action="Create" , class="btn btn-warning">Создать</a>
    </p>}
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FIO)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Phone)
            </th>
            <th>
                Класс
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (userRole.Name == "Учитель")
        {
            @foreach (var item in students)
            {
                var userClass = await classRepository.GetUserClassAsync(item);
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FIO)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Phone)
                    </td>
                    @if (!string.IsNullOrEmpty(userClass?.Name))
                    {
                        <td>
                            @userClass.Name
                        </td>
                    }
                    else
                    {
                        <td>
                            -
                        </td>
                    }
                </tr>
            }
        }
        @if (userRole.Name == "admin")
        {
            @foreach (var item in Model)
            {
                Class? userClass = await classRepository.GetUserClassAsync(item);
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FIO)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Phone)
                    </td>
                    @if (!string.IsNullOrEmpty(userClass?.Name))
                    {
                        <td>
                            @userClass.Name
                        </td>
                    }
                    else
                    {
                        <td>
                            -
                        </td>
                    }
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id" , class="btn btn-warning">Изменить</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id" , class="btn btn-warning">Удалить</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
